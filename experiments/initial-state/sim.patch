diff --git a/bdm.json b/bdm.json
index 16d29fe..eaf67c0 100644
--- a/bdm.json
+++ b/bdm.json
@@ -1,42 +1,165 @@
 {
+  "bdm::OptimizationParam": {
+    "_typename": "bdm::OptimizationParam",
+    "algorithm": "",
+    "max_iterations": 100,
+    "params": [],
+    "repetition": 1
+  },
   "bdm::Param": {
+    "_typename": "bdm::Param",
+    "backup_file": "",
+    "backup_interval": 1800,
     "bound_space": 1,
+    "cache_neighbors": false,
+    "calculate_gradients": false,
+    "compute_target": "cpu",
+    "debug_numa": false,
+    "detect_static_agents": false,
     "diffusion_boundary_condition": "closed",
     "diffusion_method": "euler",
     "environment": "uniform_grid",
+    "execution_order": 0,
     "export_visualization": true,
-    "min_bound": -800,
-    "max_bound": 800,
+    "insitu_visualization": false,
+    "mapped_data_array_mode": 0,
+    "max_bound": 1300,
+    "mem_mgr_aligned_pages_shift": 5,
+    "mem_mgr_growth_rate": 1.1,
+    "mem_mgr_max_mem_per_thread_factor": 1,
+    "min_bound": -1300,
+    "minimize_memory_while_rebalancing": true,
+    "nanoflann_depth": 10,
+    "numerical_ode_solver": 1,
+    "opencl_debug": false,
+    "output_dir": "output",
+    "plot_memory_layout": false,
+    "preferred_gpu": -1,
+    "progress_bar_time_unit": "min",
+    "pv_insitu_pipeline": "/Users/tobias/Programming/biodynamo_projects/bdm-angiogenesis-reproducer/biodynamo/build/include/core/visualization/paraview/default_insitu_pipeline.py",
+    "pv_insitu_pipelinearguments": "",
+    "random_seed": 4357,
     "remove_output_dir_contents": true,
+    "restore_file": "",
+    "root_visualization": false,
+    "scheduling_batch_size": 1000,
+    "show_simulation_step": 0,
+    "simulation_max_displacement": 3,
+    "simulation_time_step": 30,
     "statistics": true,
+    "thread_safety_mechanism": 1,
+    "unibn_bucketsize": 16,
     "unschedule_default_operations": [],
+    "use_bdm_mem_mgr": true,
     "use_progress_bar": true,
-    "simulation_time_step": 0.1,
+    "visualization_compress_pv_files": true,
+    "visualization_engine": "paraview",
+    "visualization_export_generate_pvsm": true,
+    "visualization_interval": 33,
     "visualize_agents": {
       "TumorCell": [
         "cell_state_",
         "diameter_",
-        "radius_",
-        "volume_"
+        "radius_"
       ],
       "Vessel": [],
       "_typename": "map<string,set<string> >"
-    },
-    "visualize_diffusion": [
-      {
-        "_typename": "bdm::Param::VisualizeDiffusion",
-        "concentration": true,
-        "gradient": true,
-        "name": "VEGF"
-      }
-    ]
+    }
   },
   "bdm::SimParam": {
     "_typename": "bdm::SimParam",
-    "total_sim_time": 300,
-    "visualization_interval": 5,
+    "action_radius_factor": 1.214,
+    "adhesion_scale_parameter": 0.0489,
+    "alpha_Q_D_N": 6.8e-06,
+    "alpha_Q_SG2_N": 0.000821666666666667,
+    "alpha_Q_SG2_TRA": 30,
+    "alpha_SG2_D_DOX": 0.001,
+    "alpha_SG2_SG2_DOX": 0.1,
+    "apical_growth_gradient_weight": 0.3,
+    "apical_growth_old_weight": 0.5,
+    "apical_growth_quotient_threshold": 0.001,
+    "apical_growth_random_weight": 0.2,
+    "apical_growth_speed": 0.033,
+    "base_rate_H_D": 1e-05,
+    "boundary_condition_dox": 0,
+    "boundary_condition_nutrients": 0,
+    "boundary_condition_tra": 0,
+    "boundary_condition_vegf": 0,
+    "cell_nuclear_radius": 5.296,
+    "cell_radius": 9.953,
+    "decay_rate_dox": 0.0002,
+    "decay_rate_nutrients": 1e-05,
+    "decay_rate_tra": 0,
+    "decay_rate_vegf": 1e-05,
     "default_vessel_length": 30,
-    "secretion_rate_vegf": 0.03,
-    "diffusion_vegf": 3.0
+    "diffusion_dox": 0.7083,
+    "diffusion_nutrients": 0.833333333333333,
+    "diffusion_resolution_dox": 200,
+    "diffusion_resolution_nutrients": 200,
+    "diffusion_resolution_tra": 200,
+    "diffusion_resolution_vegf": 200,
+    "diffusion_tra": 0.09,
+    "diffusion_vegf": 0.175,
+    "dox_consumption_rate_tcell": 0,
+    "dox_supply_rate_vessel": 0.005,
+    "duration_apoptosis": 516,
+    "duration_cell_cycle": 1080,
+    "duration_growth_phase": 540,
+    "filled_volume": 0.64,
+    "force_calculation_frequency": 6,
+    "gamma_Q_D_N": 0.000408333333333333,
+    "hypoxic_threshold": 0.09,
+    "initial_concentration_dox": 0,
+    "initial_concentration_nutrients": 0,
+    "initial_concentration_tra": 0,
+    "initial_concentration_vegf": 0,
+    "k_Q_D_N": 50,
+    "keep_dead_cells": true,
+    "max_speed": 10,
+    "min_dist_to_bifurcation": 80,
+    "min_dist_to_tip_cell": 150,
+    "num_cells": 1000,
+    "nutrient_consumption_rate_tcell": -1.76,
+    "nutrient_supply_rate_vessel": 0.003,
+    "random_vessel_exponent": 1,
+    "random_vessel_frequency_mean": 3.1415,
+    "random_vessel_frequency_std": 4,
+    "random_vessel_max_deviation": 0.2,
+    "random_vessel_num_modes": 10,
+    "repulsive_scale_parameter": 10,
+    "sprouting_rate": 0.001,
+    "threshold_Q_D_N": 0.000538,
+    "threshold_Q_SG2_N": 0.0538,
+    "threshold_SG2_D_DOX": 0.001,
+    "threshold_SG2_SG2_DOX": 0.001,
+    "tip_cell_finder_update_frequency": 1,
+    "total_sim_time": 20,
+    "tra_consumption_rate_tcell": -0.036,
+    "tra_supply_rate_vessel": 0.1,
+    "vegf_consumption_rate_vessel": -4,
+    "vegf_grad_threshold_apical_growth": 1e-05,
+    "vegf_supply_rate_tcell": 100,
+    "vegf_threshold_sprouting": 0.001,
+    "verify_continuum_values": false,
+    "viscosity": 2,
+    "visualization_interval": 10,
+    "zeta_H_D_DOX": 100,
+    "zeta_H_D_TRA": 0,
+    "zeta_H_D_TRA_DOX": 0,
+    "zeta_Q_D_DOX": 100,
+    "zeta_Q_D_TRA": 0,
+    "zeta_Q_D_TRA_DOX": 0
+  },
+  "bdm::neuroscience::Param": {
+    "_typename": "bdm::neuroscience::Param",
+    "neurite_default_actual_length": 1,
+    "neurite_default_adherence": 0.1,
+    "neurite_default_density": 1,
+    "neurite_default_diameter": 1,
+    "neurite_default_spring_constant": 10,
+    "neurite_default_tension": 0,
+    "neurite_max_length": 15,
+    "neurite_min_length": 2,
+    "neurite_minimial_bifurcation_length": 0
   }
 }
diff --git a/pysrc/plot-data.py b/pysrc/plot-data.py
index 2f3cfbc..e627dd3 100644
--- a/pysrc/plot-data.py
+++ b/pysrc/plot-data.py
@@ -118,7 +118,7 @@ def plot_data(N, data, results_dir):
         fig.set_dpi(500)
 
         # Plot the data
-        ax.plot(data.index, data["mean_{}".format(i)], label="mean")
+        ax.plot(data.index, data["mean_{}".format(i)], label="mean", marker="o", markersize=3)
         ax.fill_between(
             data.index,
             data["lower_{}".format(i)],
@@ -161,9 +161,15 @@ def plot_data(N, data, results_dir):
         # Set the legend
         ax.legend()
 
+        # Set location of the legend to the upper left corner
+        ax.legend(loc="upper left")
+
         # Do not cut off the labels
         fig.tight_layout()
 
+        # Limit the y-axis to 0 and 3000
+        ax.set_ylim(0, 3000)
+
         # Save the figure
         fig.savefig(os.path.join(results_dir, "growth_group_{}.pdf".format(i)))
 
@@ -183,7 +189,7 @@ if __name__ == "__main__":
     filename = os.path.abspath(filename)
 
     # Define results directory
-    results_dir = os.path.join(dir_path, "..", "results", "data-visualization-2")
+    results_dir = os.path.join(dir_path, "..", "results", "data-visualization-3")
     results_dir = os.path.abspath(results_dir)
 
     # Read data
diff --git a/src/angiogenesis_simulation.cc b/src/angiogenesis_simulation.cc
index cd16b30..4a83912 100644
--- a/src/angiogenesis_simulation.cc
+++ b/src/angiogenesis_simulation.cc
@@ -323,6 +323,7 @@ int Simulate(int argc, const char** argv) {
     OperationRegistry::GetInstance()->AddOperationImpl(
         "VerifyContinuum", OpComputeTarget::kCpu, new VerifyContinuum());
     auto* verify_continuum = NewOperation("VerifyContinuum");
+    verify_continuum->frequency_ = 20;
     scheduler->ScheduleOp(verify_continuum, OpType::kPostSchedule);
   }
 
@@ -352,12 +353,77 @@ int Simulate(int argc, const char** argv) {
   // Test if correct number of Agents were initialized
   std::cout << "Agents im Simulation: " << rm->GetNumAgents() << "\n";
 
-  // Run simulation for a defined number of timesteps
+  // 12.1 Run simulation for a defined number of timesteps to grow vasculature
   u_int64_t time_steps{static_cast<u_int64_t>(
       ceil(sparam->total_sim_time / param->simulation_time_step))};
+
+  // 12.2 Precompute the vessel's ability to deliver the drugs
+  auto& treatment = simulation.GetTreatment();
+
+  // -------------------------------------------------------------------------
+  // Treatment parameter
+
+  // // TRA TRA DOX
+  // double tra_start_1 = 108 * 60 * 24;
+  // double tra_end_1 = 109 * 60 * 24;
+  // double tra_start_2 = 110 * 60 * 24;
+  // double tra_end_2 = 111 * 60 * 24;
+  // double dox_start = 112 * 60 * 24;
+  // double dox_end = 113 * 60 * 24;
+
+  // DOX
+  // double tra_start_1 = std::numeric_limits<double>::max();
+  // double tra_end_1 = std::numeric_limits<double>::max();
+  // double tra_start_2 = std::numeric_limits<double>::max();
+  // double tra_end_2 = std::numeric_limits<double>::max();
+  // double dox_start = 108 * 60 * 24;
+  // double dox_end = 109 * 60 * 24;
+
+  // // TRA TRA
+  // double tra_start_1 = 108 * 60 * 24;
+  // double tra_end_1 = 109 * 60 * 24;
+  // double tra_start_2 = 110 * 60 * 24;
+  // double tra_end_2 = 111 * 60 * 24;
+  // double dox_start = std::numeric_limits<double>::max();
+  // double dox_end = std::numeric_limits<double>::max();
+
+  // // DOX TRA TRA
+  double tra_start_1 = 110 * 60 * 24;
+  double tra_end_1 = 111 * 60 * 24;
+  double tra_start_2 = 112 * 60 * 24;
+  double tra_end_2 = 113 * 60 * 24;
+  double dox_start = 108 * 60 * 24;
+  double dox_end = 109 * 60 * 24;
+
+  treatment.SetTreatmentParameters(tra_start_1, tra_end_1, tra_start_2,
+                                   tra_end_2, dox_start, dox_end);
+
+  // -------------------------------------------------------------------------
+
+  simulation.PrecomputeVesselPermeability(3 * sparam->total_sim_time,
+                                          param->simulation_time_step,
+                                          param->simulation_time_step / 1000.0);
+
   scheduler->Simulate(time_steps);
+
+  // 12.3 Iterate over all agents and remove sprouting and growth behavior,
+  // i.e. freeze vessels and continue growing tumor
+  rm->ForEachAgent([](Agent* agent) {
+    auto* vessel = dynamic_cast<Vessel*>(agent);
+    if (vessel) {
+      vessel->RemoveBehavior(vessel->GetAllBehaviors()[0]);  // Remove sprouting
+      vessel->RemoveBehavior(vessel->GetAllBehaviors()[0]);  // Remove growth
+    }
+  });
+  // scheduler->Simulate(std::ceil(time_steps / 2.0));
+  scheduler->Simulate(std::ceil(1.3 * time_steps));
+  // scheduler->Simulate(time_steps);
   std::cout << "Simulation completed successfully!" << std::endl;
 
+  // Save the treatment parameter
+  std::string filename =
+      Concat(simulation.GetOutputDir(), "/treatment_parameters.json");
+  treatment.SaveTreatmentParametersToJson(filename);
   // Save timeseries data
   PlotAndSaveTimeseries();
 
@@ -481,6 +547,11 @@ double PlaceStraightVessel(
                                         compartment_length);
   vessel_compartment_1->SetDiameter(diameter);
   vessel_compartment_1->ProhibitGrowth();
+  vessel_compartment_1->AddBehavior(new SproutingAngiogenesis());
+  vessel_compartment_1->AddBehavior(new ApicalGrowth());
+  vessel_compartment_1->AddBehavior(new LineContinuumInteraction(
+      sparam->nutrient_supply_rate_vessel, sparam->vegf_consumption_rate_vessel,
+      sparam->dox_supply_rate_vessel, sparam->tra_supply_rate_vessel));
 
   Vessel* vessel_compartment_2{nullptr};
   for (int i = 1; i < n_compartments; i++) {
diff --git a/src/modules/vessel.cc b/src/modules/vessel.cc
index 72db909..f3ec0c1 100644
--- a/src/modules/vessel.cc
+++ b/src/modules/vessel.cc
@@ -230,7 +230,7 @@ void ApicalGrowth::Run(Agent* agent) {
   if (gradient.Norm() < sparam->vegf_grad_threshold_apical_growth) {
     return;
   }
-  if (gradient.Norm() > 0.016) {
+  if (gradient.Norm() > 0.022) {
     // This indicates that we're now in the tumor region, stop growth. No longer
     // counted as tip cell.
     auto* vessel = dynamic_cast<Vessel*>(agent);
@@ -286,6 +286,12 @@ void LineContinuumInteraction::Run(Agent* agent) {
 
     // Get the pointers to the diffusion grids: nutrients, VEGF, DOX, and TRA
     auto* sim = Simulation::GetActive();
+    // WARNING: This is a bit of a hack. We need to cast the simulation to the
+    // derived class AngiogenesisSimulation to access the tip cell finder.
+    // The simulation is however not polymorphic, so we cannot use dynamic_cast.
+    // We can however use static_cast, because we know that the simulation is
+    // an AngiogenesisSimulation. This is only true for this specific example.
+    auto* asim = static_cast<AngiogenesisSimulation*>(sim);
     const auto* rm = sim->GetResourceManager();
     auto* param = sim->GetParam();
     const double simulation_time_step = param->simulation_time_step;
@@ -353,7 +359,36 @@ void LineContinuumInteraction::Run(Agent* agent) {
     const double surface = vessel->GetSurfaceArea();
     for (int j = 0; j < 4; j++) {
       auto* dg = dg_array[j];
-      const double rate = interaction_rate_[j];
+      double rate = interaction_rate_[j];
+      if (j == 2) {
+        // DOX is only supplied between specific times
+        // constexpr double start_time = 106 * 24 * 60;
+        // constexpr double end_time = 108 * 24 * 60;
+        const double time =
+            Simulation::GetActive()->GetScheduler()->GetSimulatedTime();
+        bool dox_active = asim->GetTreatment().IsDoxApplied(time);
+        // if (time < start_time || time > end_time) {
+        if (!dox_active) {
+          continue;
+        }
+        const auto simulated_time_steps =
+            Simulation::GetActive()->GetScheduler()->GetSimulatedSteps();
+        rate *= (1 + asim->GetVesselPermeability(simulated_time_steps));
+      }
+      if (j == 3) {
+        // TRA is only supplied between specific times
+        constexpr double start_time = 102 * 24 * 60;
+        constexpr double end_time = 104 * 24 * 60;
+        const double time =
+            Simulation::GetActive()->GetScheduler()->GetSimulatedTime();
+        bool tra_active = asim->GetTreatment().IsTraApplied(time);
+        if (!tra_active) {
+          continue;
+        }
+        // if (time < start_time || time > end_time) {
+        //   continue;
+        // }
+      }
       if (rate == 0) {
         continue;
       }
